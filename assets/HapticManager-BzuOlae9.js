import{_ as a}from"./main-DsaK7DbH.js";class e{constructor(t={}){this.hasVibrationAPI="vibrate"in navigator,this.isSecureContext=window.isSecureContext,this.userAgent=navigator.userAgent.toLowerCase(),this.isIOS=/ipad|iphone|ipod/.test(this.userAgent),this.isAndroid=/android/.test(this.userAgent),this.isSafari=/safari/.test(this.userAgent)&&!/chrome/.test(this.userAgent),this.iOSVersion=this.getIOSVersion(),this.supportsIOSHaptics=this.isIOS&&this.iOSVersion>=18,this.enabled=t.enabled??!0,this.patterns={reveal:100,activate:120,success:[50,100,50],error:[100,50,100,50,100],warning:[200,100,200]},this.lastVibration=0,this.minInterval=50,this.iosHaptics=null,this.supportsIOSHaptics&&this.initIOSHaptics(),this.log("HapticManager initialized",{iOS:this.isIOS,Android:this.isAndroid,hasVibrationAPI:this.hasVibrationAPI,supportsIOSHaptics:this.supportsIOSHaptics,iOSVersion:this.iOSVersion})}getIOSVersion(){if(!this.isIOS)return 0;const t=navigator.userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);return t?parseInt(t[1],10):0}async initIOSHaptics(){try{const t=await a(()=>import("./index-C_6GQt14.js"),[]);this.iosHaptics=t.haptic,this.log("iOS haptics module loaded successfully")}catch(t){this.log("iOS haptics module not available, falling back to standard API",t),this.supportsIOSHaptics=!1}}vibrate(t=this.patterns.reveal){if(!this.enabled)return this.log("Haptics disabled"),!1;const i=Date.now();if(i-this.lastVibration<this.minInterval)return this.log(`Vibration throttled (${i-this.lastVibration}ms since last)`),!1;try{if(this.supportsIOSHaptics&&this.iosHaptics){if(this.lastVibration=i,Array.isArray(t)){if(t.length===3&&t[1]===100)return this.iosHaptics.confirm();if(t.length===5)return this.iosHaptics.error()}return this.iosHaptics()}if(this.hasVibrationAPI&&!this.isIOS){if(!this.isSecureContext)return this.log("Vibration requires HTTPS"),!1;this.lastVibration=i;const s=navigator.vibrate(t);return this.log(`Android vibration triggered: ${t}ms, result: ${s}`),s}return this.log("No haptic support on this device"),!1}catch(s){return this.log("Vibration error:",s),!1}}reveal(){return this.vibrate(this.patterns.reveal)}activate(){return this.vibrate(this.patterns.activate)}success(){return this.vibrate(this.patterns.success)}error(){return this.vibrate(this.patterns.error)}warning(){return this.vibrate(this.patterns.warning)}stop(){return this.hasVibrationAPI&&!this.isIOS?navigator.vibrate(0):!1}provideVisualFeedback(t){if(!t)return;if(this.getCapabilities().supported)this.reveal();else{const s=t.style.transform;t.style.transition="transform 100ms ease-out",t.style.transform="scale(0.95)",setTimeout(()=>{t.style.transform=s||"",setTimeout(()=>{t.style.transition=""},100)},100)}}createTouchHandler(t=this.patterns.reveal){return i=>{(i.type==="touchstart"||i.type==="touchend")&&this.vibrate(t)}}getCapabilities(){return{supported:this.supportsIOSHaptics||this.hasVibrationAPI&&!this.isIOS,platform:this.isIOS?"ios":this.isAndroid?"android":"other",method:this.supportsIOSHaptics?"ios-switch":this.hasVibrationAPI?"vibration-api":"none",iOSVersion:this.iOSVersion,fallbackAvailable:!0}}setEnabled(t){this.enabled=t,this.log(`Haptics ${t?"enabled":"disabled"}`)}setPattern(t,i){this.patterns[t]!==void 0&&(this.patterns[t]=i,this.log(`Updated ${t} pattern to ${i}ms`))}log(t,i){window.debugHaptics&&console.log(`[HapticManager] ${t}`,i||"")}}let r=null;function h(){return r||(r=new e),r}export{h as g};

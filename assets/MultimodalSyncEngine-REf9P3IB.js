import{g as r}from"./HapticManager-Lm06dno1.js";import"./main-pHyaLokq.js";class c{constructor(t,e){this.audioEngine=t,this.visualController=e,this.hapticManager=r(),this.audioContext=(t==null?void 0:t.audioContext)||new(window.AudioContext||window.webkitAudioContext),this.platform=this.detectPlatform(),this.latencyCompensation=this.getBaseLatencyCompensation(),this.scheduleLookahead=.025,this.frameScheduler=new Map,this.performanceData=[],this.maxPerformanceHistory=50,this.adaptiveCompensation={audio:0,visual:0,haptic:0},console.log("[MultimodalSyncEngine] Initialized with platform:",this.platform),console.log("[MultimodalSyncEngine] Base latency compensation:",this.latencyCompensation)}detectPlatform(){const t=navigator.userAgent.toLowerCase(),e=/ipad|iphone|ipod/.test(t)&&!window.MSStream,i=/android/.test(t),a=/safari/.test(t)&&!/chrome/.test(t);return{isIOS:e,isAndroid:i,isSafari:a,hasVibration:"vibrate"in navigator&&!e,audioLatency:e?110:i?300:150,name:e?"iOS":i?"Android":"Desktop"}}getBaseLatencyCompensation(){return{haptic:this.platform.isIOS?0:-10,audio:0,visual:20}}async triggerSynchronizedFeedback(t){this.audioContext.state==="suspended"&&await this.audioContext.resume();const e=this.audioContext.currentTime,i=e+this.scheduleLookahead,a=this.calculateModalityTimings(i);console.log("[MultimodalSyncEngine] Scheduling feedback:",{current:e,target:i,timings:{haptic:(a.haptic-e)*1e3+"ms",audio:(a.audio-e)*1e3+"ms",visual:(a.visual-e)*1e3+"ms"}});const n=await Promise.allSettled([this.scheduleHaptic(a.haptic,t),this.scheduleAudio(a.audio,t),this.scheduleVisual(a.visual,t)]);return this.recordPerformanceMetrics(t,a,n),n}calculateModalityTimings(t){const e={haptic:this.latencyCompensation.haptic+this.adaptiveCompensation.haptic,audio:this.latencyCompensation.audio+this.adaptiveCompensation.audio,visual:this.latencyCompensation.visual+this.adaptiveCompensation.visual};return{haptic:t+e.haptic/1e3,audio:t+e.audio/1e3,visual:t+e.visual/1e3}}async scheduleHaptic(t,e){if(!this.platform.hasVibration)return console.log("[MultimodalSyncEngine] No vibration support, using fallback"),{status:"fallback",platform:"iOS"};const i=Math.max(0,(t-this.audioContext.currentTime)*1e3);return new Promise(a=>{const n=`haptic-start-${Date.now()}`;setTimeout(()=>{performance.mark(n),e.type==="reveal"?this.hapticManager.reveal():this.hapticManager.activate(),a({status:"success",actualTime:this.audioContext.currentTime,scheduledTime:t})},i)})}async scheduleAudio(t,e){return this.audioEngine?new Promise(i=>{const a=`audio-start-${Date.now()}`;if(this.audioEngine.scheduleRevealAt)this.audioEngine.scheduleRevealAt(t);else{const n=Math.max(0,(t-this.audioContext.currentTime)*1e3);setTimeout(()=>{performance.mark(a),e.type==="reveal"?this.audioEngine.playReveal():this.audioEngine.playActivate()},n)}i({status:"success",actualTime:this.audioContext.currentTime,scheduledTime:t})}):{status:"no-audio-engine"}}async scheduleVisual(t,e){if(!this.visualController)return{status:"no-visual-controller"};const i=Math.max(0,(t-this.audioContext.currentTime)*1e3);return new Promise(a=>{const n=`visual-start-${Date.now()}`;i<16?requestAnimationFrame(()=>{performance.mark(n),this.visualController.triggerBorderRadialAnimation(e),a({status:"success",actualTime:this.audioContext.currentTime,scheduledTime:t})}):setTimeout(()=>{requestAnimationFrame(()=>{performance.mark(n),this.visualController.triggerBorderRadialAnimation(e),a({status:"success",actualTime:this.audioContext.currentTime,scheduledTime:t})})},i-16)})}recordPerformanceMetrics(t,e,i){const a={timestamp:performance.now(),tapData:t,scheduledTimings:e,results:i,actualWindow:this.calculateSynchronizationWindow(i)};this.performanceData.push(a),this.performanceData.length>this.maxPerformanceHistory&&this.performanceData.shift(),this.updateAdaptiveCompensation()}calculateSynchronizationWindow(t){const e=t.filter(n=>n.status==="fulfilled"&&n.value.actualTime).map(n=>n.value.actualTime);if(e.length<2)return 0;const i=Math.min(...e);return(Math.max(...e)-i)*1e3}updateAdaptiveCompensation(){if(this.performanceData.length<5)return;const t=this.performanceData.slice(-10).map(i=>i.actualWindow).filter(i=>i>0);if(t.length===0)return;const e=t.reduce((i,a)=>i+a,0)/t.length;e>33?(console.log("[MultimodalSyncEngine] Sync window too wide:",e,"ms - adjusting"),this.adaptiveCompensation.visual-=2,this.adaptiveCompensation.haptic+=2):e<16&&e>0&&(console.log("[MultimodalSyncEngine] Sync window too tight:",e,"ms - adjusting"),this.adaptiveCompensation.visual+=1,this.adaptiveCompensation.haptic-=1)}getStatistics(){if(this.performanceData.length===0)return{noData:!0};const t=this.performanceData.map(i=>i.actualWindow).filter(i=>i>0),e=t.filter(i=>i>=16&&i<=33).length;return{totalEvents:this.performanceData.length,averageWindow:t.reduce((i,a)=>i+a,0)/t.length,minWindow:Math.min(...t),maxWindow:Math.max(...t),successRate:e/t.length*100,targetWindow:"16-33ms",currentCompensation:this.adaptiveCompensation}}setManualCompensation(t,e){this.adaptiveCompensation[t]!==void 0&&(this.adaptiveCompensation[t]=e,console.log("[MultimodalSyncEngine] Manual compensation set:",t,e,"ms"))}resetCompensation(){this.adaptiveCompensation={audio:0,visual:0,haptic:0},this.performanceData=[],console.log("[MultimodalSyncEngine] Compensation reset")}}let s=null;function m(o,t){return s||(s=new c(o,t)),s}export{c as MultimodalSyncEngine,c as default,m as getMultimodalSyncEngine};

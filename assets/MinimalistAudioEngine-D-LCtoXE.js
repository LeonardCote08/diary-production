class b{constructor(){this.audioContext=null,this.isUnlocked=!1,this.pendingSounds=[],this.activeSources=new Set,this.currentReveal="inkDiffusion",this.currentActivate="absorbedImpact"}async init(){try{if(this.audioContext=new(window.AudioContext||window.webkitAudioContext)({latencyHint:"interactive",sampleRate:44100}),this.audioContext.state==="suspended"){const e=async()=>{await this.audioContext.resume(),this.isUnlocked=!0,document.removeEventListener("touchstart",e),document.removeEventListener("click",e)};document.addEventListener("touchstart",e),document.addEventListener("click",e)}else this.isUnlocked=!0;return console.log("[MinimalistAudio] Initialized"),!0}catch(e){return console.error("[MinimalistAudio] Init failed:",e),!1}}createPinkNoise(e){const t=this.audioContext.sampleRate*e,n=this.audioContext.createBuffer(1,t,this.audioContext.sampleRate),i=n.getChannelData(0);let l=0,p=0,s=0,c=0,r=0,a=0,o=0;for(let u=0;u<t;u++){const m=Math.random()*2-1;l=.99886*l+m*.0555179,p=.99332*p+m*.0750759,s=.969*s+m*.153852,c=.8665*c+m*.3104856,r=.55*r+m*.5329522,a=-.7616*a-m*.016898;const f=l+p+s+c+r+a+o+m*.5362;i[u]=f*.11,o=m*.115926}return n}createSoftBitCrusher(e=10){const n=this.audioContext.createScriptProcessor(256,1,1),i=Math.pow(1/2,e);let l=0,p=0;return n.onaudioprocess=s=>{const c=s.inputBuffer.getChannelData(0),r=s.outputBuffer.getChannelData(0);for(let a=0;a<256;a++)l+=.9,l>=1&&(l-=1,p=i*Math.floor(c[a]/i+.5)),r[a]=p},n}playSandShift(){const e=this.audioContext,t=e.currentTime,n=.2,i=e.createOscillator();i.type="square",i.frequency.setValueAtTime(150,t),i.frequency.exponentialRampToValueAtTime(100,t+n);const l=this.createPinkNoise(n),p=e.createBufferSource();p.buffer=l;const s=e.createBiquadFilter();s.type="bandpass",s.frequency.value=800,s.Q.value=.5;const c=e.createBiquadFilter();c.type="lowpass",c.frequency.value=1500;const r=this.createSoftBitCrusher(8),a=e.createGain();a.gain.value=.12;const o=e.createGain();o.gain.value=.08;const u=e.createGain();u.gain.setValueAtTime(0,t),u.gain.linearRampToValueAtTime(.2,t+.02),u.gain.linearRampToValueAtTime(.15,t+.1),u.gain.exponentialRampToValueAtTime(.001,t+n),i.connect(a),p.connect(o),a.connect(s),o.connect(s),s.connect(c),c.connect(r),r.connect(u),u.connect(e.destination),i.start(t),p.start(t),i.stop(t+n),p.stop(t+n)}playSandCrystal(){const e=this.audioContext,t=e.currentTime,n=.18,i=e.createOscillator();i.type="triangle",i.frequency.value=400;const l=e.createOscillator();l.type="sine",l.frequency.value=400*3.5;const p=e.createGain();p.gain.value=200,l.connect(p),p.connect(i.frequency);const s=e.createOscillator();s.type="square",s.frequency.value=200;const c=e.createGain();c.gain.value=.04;const r=e.createDelay(.01);r.delayTime.value=.003;const a=e.createGain();a.gain.value=.2;const o=this.createSoftBitCrusher(9),u=e.createGain();u.gain.setValueAtTime(0,t),u.gain.linearRampToValueAtTime(.25,t+.008),u.gain.exponentialRampToValueAtTime(.001,t+n),i.connect(r),s.connect(c),c.connect(r),r.connect(a),a.connect(r),r.connect(o),o.connect(u),u.connect(e.destination),i.start(t),l.start(t),s.start(t),i.stop(t+n),l.stop(t+n),s.stop(t+n)}playSandWhisper(){const e=this.audioContext,t=e.currentTime,n=.22,i=e.sampleRate*n,l=e.createBuffer(1,i,e.sampleRate),p=l.getChannelData(0);for(let f=0;f<i;f++)p[f]=(Math.random()*2-1)*.4;const s=e.createBufferSource();s.buffer=l;const c=e.createOscillator();c.type="square",c.frequency.value=250;const r=e.createGain();r.gain.value=.02;const a=e.createBiquadFilter();a.type="bandpass",a.frequency.setValueAtTime(1500,t),a.frequency.exponentialRampToValueAtTime(3e3,t+n),a.Q.value=.3;const o=e.createBiquadFilter();o.type="lowpass",o.frequency.value=2e3;const u=this.createSoftBitCrusher(10),m=e.createGain();m.gain.setValueAtTime(0,t),m.gain.linearRampToValueAtTime(.15,t+.05),m.gain.linearRampToValueAtTime(.12,t+.15),m.gain.exponentialRampToValueAtTime(.001,t+n),s.connect(a),c.connect(r),r.connect(a),a.connect(o),o.connect(u),u.connect(m),m.connect(e.destination),s.start(t),c.start(t),s.stop(t+n),c.stop(t+n)}playSandTrickle(){const e=this.audioContext,t=e.currentTime,n=.22,i=12,l=.03;for(let u=0;u<i;u++){const m=t+u*.015+Math.random()*.005,f=e.sampleRate*l,h=e.createBuffer(1,f,e.sampleRate),d=h.getChannelData(0);for(let v=0;v<f;v++){const q=Math.sin(v/f*Math.PI);d[v]=(Math.random()*2-1)*q*.3}const T=e.createBufferSource();T.buffer=h;const y=e.createBiquadFilter();y.type="bandpass",y.frequency.value=2e3+Math.random()*3e3,y.Q.value=.5+Math.random()*.5;const g=e.createGain(),A=.15*Math.pow(.85,u);g.gain.setValueAtTime(A,m),g.gain.exponentialRampToValueAtTime(.001,m+l),T.connect(y),y.connect(g),g.connect(e.destination),T.start(m),T.stop(m+l)}const p=this.createPinkNoise(n),s=e.createBufferSource();s.buffer=p;const c=e.createBiquadFilter();c.type="highpass",c.frequency.value=4e3,c.Q.value=.7;const r=e.createOscillator();r.frequency.value=7;const a=e.createGain();a.gain.value=.05;const o=e.createGain();o.gain.setValueAtTime(0,t),o.gain.linearRampToValueAtTime(.08,t+.02),o.gain.linearRampToValueAtTime(.06,t+.15),o.gain.exponentialRampToValueAtTime(.001,t+n),r.connect(a),a.connect(o.gain),s.connect(c),c.connect(o),o.connect(e.destination),s.start(t),r.start(t),s.stop(t+n),r.stop(t+n)}playSandMagic(){const e=this.audioContext,t=e.currentTime,n=.25,i=e.createOscillator();i.type="triangle",i.frequency.setValueAtTime(600,t),i.frequency.exponentialRampToValueAtTime(1800,t+.2);const l=e.createOscillator();l.type="sine",l.frequency.value=250;const p=e.createGain();p.gain.setValueAtTime(500,t),p.gain.exponentialRampToValueAtTime(100,t+.2),l.connect(p),p.connect(i.frequency);const s=this.createPinkNoise(n),c=e.createBufferSource();c.buffer=s;const r=e.createGain();r.gain.value=.08;const a=e.createBiquadFilter();a.type="bandpass",a.frequency.setValueAtTime(800,t),a.frequency.exponentialRampToValueAtTime(2e3,t+.2),a.Q.value=3;const o=this.createSoftBitCrusher(9),u=e.createGain();u.gain.setValueAtTime(0,t),u.gain.linearRampToValueAtTime(.35,t+.01),u.gain.exponentialRampToValueAtTime(.001,t+n),i.connect(a),c.connect(r),r.connect(a),a.connect(o),o.connect(u),u.connect(e.destination),i.start(t),l.start(t),c.start(t),i.stop(t+n),l.stop(t+n),c.stop(t+n)}playAbsorbedImpact(){const e=this.audioContext,t=e.currentTime,n=.4,i=e.sampleRate*.008,l=e.createBuffer(1,i,e.sampleRate),p=l.getChannelData(0);for(let T=0;T<i;T++)p[T]=(Math.random()*2-1)*Math.exp(-T/(i*.2))*.7;const s=e.createBufferSource();s.buffer=l;const c=e.createBiquadFilter();c.type="lowpass",c.frequency.value=1e3;const r=e.createOscillator(),a=e.createOscillator();r.type="sine",a.type="triangle";const o=180+Math.random()*80;r.frequency.value=o,a.frequency.value=o*.5;const u=e.createGain(),m=e.createGain();u.gain.setValueAtTime(0,t),u.gain.linearRampToValueAtTime(.3,t+.02),u.gain.exponentialRampToValueAtTime(.001,t+n),m.gain.setValueAtTime(0,t),m.gain.linearRampToValueAtTime(.15,t+.03),m.gain.exponentialRampToValueAtTime(.001,t+n);const f=e.createDelay(.02);f.delayTime.value=.012;const h=e.createGain();h.gain.value=.4;const d=e.createGain();d.gain.value=.4,s.connect(c),c.connect(d),r.connect(u),a.connect(m),u.connect(f),m.connect(f),f.connect(h),h.connect(f),f.connect(d),d.connect(e.destination),s.start(t),r.start(t),a.start(t),s.stop(t+.008),r.stop(t+n),a.stop(t+n)}playPaperWave(){const e=this.audioContext,t=e.currentTime,n=.4,i=e.createOscillator(),l=e.createOscillator();i.type="triangle",l.type="sine",i.frequency.setValueAtTime(320,t),i.frequency.exponentialRampToValueAtTime(160,t+n),l.frequency.setValueAtTime(325,t),l.frequency.exponentialRampToValueAtTime(155,t+n);const p=e.createOscillator();p.frequency.value=12;const s=e.createGain();s.gain.value=.3,p.connect(s);const c=e.createStereoPanner();c.pan.setValueAtTime(-.7,t),c.pan.linearRampToValueAtTime(.7,t+n);const r=e.createOscillator();r.type="square",r.frequency.value=80;const a=e.createGain();a.gain.value=.03;const o=e.createGain();o.gain.setValueAtTime(0,t),o.gain.linearRampToValueAtTime(.25,t+.1),o.gain.linearRampToValueAtTime(.2,t+.25),o.gain.exponentialRampToValueAtTime(.001,t+n),s.connect(o.gain),i.connect(o),l.connect(o),r.connect(a),a.connect(o),o.connect(c),c.connect(e.destination),i.start(t),l.start(t),p.start(t),r.start(t),i.stop(t+n),l.stop(t+n),p.stop(t+n),r.stop(t+n)}playInkSaturation(){const e=this.audioContext,t=e.currentTime,n=.4,i=120,l=[1,2,3,4,5,6],p=e.createGain(),s=this.createSoftBitCrusher(10);l.forEach((o,u)=>{const m=e.createOscillator(),f=e.createGain();m.type=u%2===0?"sawtooth":"square",m.frequency.value=i*o;const h=u*.05,d=.3/o;f.gain.setValueAtTime(0,t+h),f.gain.linearRampToValueAtTime(d,t+h+.08),f.gain.linearRampToValueAtTime(d*.8,t+.3),f.gain.exponentialRampToValueAtTime(.001,t+n),m.connect(f),f.connect(p),m.start(t),m.stop(t+n)});const c=e.createBiquadFilter();c.type="lowpass",c.frequency.setValueAtTime(200,t),c.frequency.exponentialRampToValueAtTime(800,t+n),c.Q.setValueAtTime(.5,t),c.Q.linearRampToValueAtTime(3,t+n);const r=e.createWaveShaper(),a=new Float32Array(256);for(let o=0;o<256;o++){const u=o/128-1;a[o]=Math.tanh(u*1.5)}r.curve=a,p.gain.value=.35,p.connect(s),s.connect(r),r.connect(c),c.connect(e.destination)}playSurfaceEcho(){const e=this.audioContext,t=e.currentTime,n=.4,i=e.sampleRate*.15,l=e.createBuffer(1,i,e.sampleRate),p=l.getChannelData(0);for(let T=0;T<i;T++)p[T]=(Math.random()*2-1)*Math.exp(-T/(i*.6))*.6;const s=e.createBufferSource();s.buffer=l;const c=e.createOscillator();c.type="square",c.frequency.value=200;const r=e.createGain();r.gain.value=.05;const a=e.createBiquadFilter();a.type="bandpass",a.frequency.value=800,a.Q.value=1.2;const o=e.createDelay(.02);o.delayTime.value=.01+Math.random()*.005;const u=e.createGain();u.gain.value=.45;const m=e.createBiquadFilter();m.type="lowpass",m.frequency.value=2500;const f=e.createGain(),h=e.createGain(),d=e.createGain();f.gain.value=.6,h.gain.value=.4,d.gain.setValueAtTime(0,t),d.gain.linearRampToValueAtTime(.3,t+.05),d.gain.exponentialRampToValueAtTime(.001,t+n),s.connect(a),c.connect(r),r.connect(a),a.connect(f),a.connect(o),o.connect(h),o.connect(u),u.connect(m),m.connect(o),f.connect(d),h.connect(d),d.connect(e.destination),s.start(t),c.start(t),s.stop(t+.15),c.stop(t+n)}playReveal(){this.playAbsorbedImpact()}playActivate(){switch(this.currentActivate){case"absorbedImpact":this.playAbsorbedImpact();break;case"paperWave":this.playPaperWave();break;case"inkSaturation":this.playInkSaturation();break;case"surfaceEcho":this.playSurfaceEcho();break}}setRevealSound(e){this.currentReveal=e}setActivateSound(e){this.currentActivate=e}}export{b as default};

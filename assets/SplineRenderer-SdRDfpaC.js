class g{constructor(t){this.quality=t.quality||"high",this.tension=.5,this.segmentResolution=this.quality==="high"?20:10,this.splineCache=new Map,this.cacheSize=100}createSpline(t){if(t.length<4)return this.createLinearPath(t);const e=this.getCacheKey(t);if(this.splineCache.has(e))return this.splineCache.get(e);const s=[];for(let h=1;h<t.length-2;h++){const n=t[h-1],i=t[h],l=t[h+1],o=t[h+2];for(let c=0;c<1;c+=1/this.segmentResolution){const a=this.catmullRomPoint(n,i,l,o,c);s.push(a)}}return s.push(t[t.length-2]),this.cacheSpline(e,s),s}catmullRomPoint(t,e,s,h,n){const i=n*n,l=i*n,o=(s.x-t.x)*this.tension,c=(h.x-e.x)*this.tension,a=e.x+o*n+(3*(s.x-e.x)-2*o-c)*i+(2*(e.x-s.x)+o+c)*l,r=(s.y-t.y)*this.tension,y=(h.y-e.y)*this.tension,u=e.y+r*n+(3*(s.y-e.y)-2*r-y)*i+(2*(e.y-s.y)+r+y)*l;return{x:a,y:u}}createLinearPath(t){const e=[];for(let s=0;s<t.length-1;s++){const h=t[s],n=t[s+1];for(let i=0;i<1;i+=1/this.segmentResolution)e.push({x:h.x+(n.x-h.x)*i,y:h.y+(n.y-h.y)*i})}return e.push(t[t.length-1]),e}getPositionAt(t,e){const s=Math.floor(e*(t.length-1)),h=e*(t.length-1)-s;if(s>=t.length-1)return t[t.length-1];const n=t[s],i=t[s+1];return{x:n.x+(i.x-n.x)*h,y:n.y+(i.y-n.y)*h}}getCacheKey(t){return t.map(e=>`${e.x.toFixed(4)},${e.y.toFixed(4)}`).join("|")}cacheSpline(t,e){if(this.splineCache.set(t,e),this.splineCache.size>this.cacheSize){const s=this.splineCache.keys().next().value;this.splineCache.delete(s)}}setQuality(t){this.quality=t,this.segmentResolution=t==="high"?20:10,this.splineCache.clear()}destroy(){this.splineCache.clear()}}export{g as default};

import{O as h}from"./index-CPq3kBAb.js";class c{constructor(t={}){Object.assign(this,{viewer:t.viewer,spatialIndex:t.spatialIndex,onHotspotHover:t.onHotspotHover||(()=>{}),onHotspotClick:t.onHotspotClick||(()=>{}),visibilityCheckInterval:t.visibilityCheckInterval||100,debugMode:t.debugMode||!1}),this.canvas=null,this.ctx=null,this.hotspots=[],this.visibleHotspots=new Set,this.hoveredHotspot=null,this.selectedHotspot=null,this.lastRenderTime=0,this.renderThrottle=16,this.isRendering=!1,this.isTouching=!1,this.touchStartTime=0,this.touchStartPoint=null,this.init()}init(){if(!this.viewer.world.getItemCount()){this.viewer.addOnceHandler("open",()=>this.init());return}this.canvas=document.createElement("canvas"),this.canvas.style.position="absolute",this.canvas.style.left="0",this.canvas.style.top="0",this.canvas.style.width="100%",this.canvas.style.height="100%",this.canvas.style.pointerEvents="none",this.canvas.style.zIndex="1",this.ctx=this.canvas.getContext("2d",{alpha:!0,desynchronized:!0,willReadFrequently:!1}),this.viewer.container.appendChild(this.canvas),this.hotspots=this.spatialIndex.getAllHotspots(),console.log(`CanvasHotspotRenderer: Loaded ${this.hotspots.length} hotspots`),this.setupEventHandlers(),this.startRenderLoop()}setupEventHandlers(){this.viewer.addHandler("animation-frame",()=>{this.render()}),this.viewer.addHandler("update-viewport",()=>{this.render()}),this.viewer.addHandler("resize",()=>{this.canvas.width=0,this.render()}),this.viewer.addHandler("canvas-draw",()=>{this.render()});const t=this.viewer.canvas;t.addEventListener("touchstart",e=>{this.isTouching=!0,this.touchStartTime=Date.now(),e.touches.length===1&&(this.touchStartPoint={x:e.touches[0].clientX,y:e.touches[0].clientY})},{passive:!0}),t.addEventListener("touchend",e=>{if(Date.now()-this.touchStartTime<300&&this.touchStartPoint&&e.changedTouches.length===1){const s=e.changedTouches[0];Math.sqrt(Math.pow(s.clientX-this.touchStartPoint.x,2)+Math.pow(s.clientY-this.touchStartPoint.y,2))<10&&this.handleTap(s.clientX,s.clientY)}this.isTouching=!1,this.touchStartPoint=null},{passive:!0}),"ontouchstart"in window||(t.addEventListener("click",e=>{this.handleTap(e.clientX,e.clientY)}),t.addEventListener("mousemove",e=>{const i=this.viewer.element.getBoundingClientRect(),s=new h.Point(e.clientX-i.left,e.clientY-i.top),n=this.viewer.viewport.pointFromPixel(s),r=this.viewer.viewport.viewportToImageCoordinates(n),o=this.findHotspotAtPoint(r);o!==this.hoveredHotspot&&(this.hoveredHotspot=o,this.onHotspotHover(o),this.render()),t.style.cursor=o?"pointer":"default"}))}handleTap(t,e){const i=this.viewer.element.getBoundingClientRect(),s=new h.Point(t-i.left,e-i.top),n=this.viewer.viewport.pointFromPixel(s),r=this.viewer.viewport.viewportToImageCoordinates(n),o=this.findHotspotAtPoint(r);o&&(this.selectedHotspot=o,this.onHotspotClick(o),this.scheduleRender())}findHotspotAtPoint(t){const e=this.spatialIndex.queryViewport({minX:t.x-1,minY:t.y-1,maxX:t.x+1,maxY:t.y+1});for(const i of e)if(this.visibleHotspots.has(i.id)&&this.isPointInHotspot(t,i))return i;return null}isPointInHotspot(t,e){return this.spatialIndex.isPointInHotspot(t.x,t.y,e)}scheduleRender(){this.render()}startRenderLoop(){setInterval(()=>{this.updateVisibleHotspots()},this.visibilityCheckInterval),this.updateVisibleHotspots(),this.render()}updateVisibleHotspots(){const t=this.viewer.viewport,e=t.getBounds(),i=t.viewportToImageCoordinates(e.getTopLeft()),s=t.viewportToImageCoordinates(e.getBottomRight()),n=(s.x-i.x)*.1,r={minX:i.x-n,minY:i.y-n,maxX:s.x+n,maxY:s.y+n},o=this.spatialIndex.queryViewport(r);this.visibleHotspots.clear(),o.forEach(a=>this.visibleHotspots.add(a.id)),o.length!==this.visibleHotspots.size&&this.scheduleRender()}render(){if(this.isRendering)return;this.isRendering=!0,this.lastRenderTime=performance.now();const e=this.viewer.element.getBoundingClientRect();(this.canvas.width!==e.width||this.canvas.height!==e.height)&&(this.canvas.width=e.width,this.canvas.height=e.height),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.save();let i=0;for(const s of this.hotspots)this.visibleHotspots.has(s.id)&&(this.renderHotspot(s),i++);this.ctx.restore(),this.debugMode&&i>0&&console.log(`Rendered ${i} hotspots`),this.isRendering=!1}renderHotspot(t){var s,n;const e=((s=this.hoveredHotspot)==null?void 0:s.id)===t.id,i=((n=this.selectedHotspot)==null?void 0:n.id)===t.id;if(this.debugMode){const r={audio_only:"rgba(0, 203, 244, 0.3)",audio_link:"rgba(73, 243, 0, 0.3)",audio_image:"rgba(255, 5, 247, 0.3)",audio_image_link:"rgba(255, 93, 0, 0.3)",audio_sound:"rgba(255, 176, 0, 0.3)"};this.ctx.fillStyle=r[t.type]||r.audio_only,this.ctx.strokeStyle=e||i?"#fff":"transparent",this.ctx.lineWidth=e||i?2:1}else e||i?(this.ctx.shadowColor="rgba(255, 255, 255, 0.8)",this.ctx.shadowBlur=i?15:10,this.ctx.fillStyle="rgba(255, 255, 255, 0.2)",this.ctx.strokeStyle="rgba(255, 255, 255, 1)",this.ctx.lineWidth=i?3:2):(this.ctx.shadowBlur=0,this.ctx.fillStyle="transparent",this.ctx.strokeStyle="transparent",this.ctx.lineWidth=0);t.shape==="polygon"?this.drawPolygon(t.coordinates):t.shape==="multipolygon"&&t.coordinates.forEach(r=>this.drawPolygon(r))}drawPolygon(t){if(t.length<3)return;const e=this.viewer.viewport;this.ctx.beginPath();for(let i=0;i<t.length;i++){const s=t[i][0],n=t[i][1],r=e.imageToViewportCoordinates(new h.Point(s,n)),o=e.pixelFromPoint(r);i===0?this.ctx.moveTo(o.x,o.y):this.ctx.lineTo(o.x,o.y)}this.ctx.closePath(),this.ctx.fill(),this.ctx.strokeStyle!=="transparent"&&this.ctx.stroke()}updateVisibility(){this.updateVisibleHotspots()}calculateGlowIntensity(){if(!this.viewer||!this.viewer.viewport)return 1;const t=this.viewer.viewport.getZoom(),e=1,i=10;if(t<=e)return 1;if(t>=i)return .3;const s=(t-e)/(i-e);return .3+(1-Math.pow(s,.5))*.7}setDebugMode(t){this.debugMode=t,this.scheduleRender()}destroy(){this.viewer.removeHandler("animation-frame"),this.viewer.removeHandler("update-viewport"),this.viewer.removeHandler("canvas-draw"),this.viewer.removeHandler("resize"),this.canvas&&this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas),this.canvas=null,this.ctx=null,this.hotspots=[],this.visibleHotspots.clear()}}export{c as default};

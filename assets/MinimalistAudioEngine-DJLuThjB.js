import{g as V}from"./HapticManager-Dz8wUIhk.js";import"./main-Bp3pVuOw.js";class G{constructor(){this.audioContext=null,this.isUnlocked=!1,this.pendingSounds=[],this.activeSources=new Set,this.currentReveal="inkDiffusion",this.currentActivate="absorbedImpact",this.haptics=V(),this.hapticsEnabled=!0,this.globalVolume=2.5}async init(){try{if(this.audioContext=new(window.AudioContext||window.webkitAudioContext)({latencyHint:"interactive",sampleRate:44100}),this.audioContext.state==="suspended"){const e=async()=>{await this.audioContext.resume(),this.isUnlocked=!0,document.removeEventListener("touchstart",e),document.removeEventListener("click",e)};document.addEventListener("touchstart",e),document.addEventListener("click",e)}else this.isUnlocked=!0;return console.log("[MinimalistAudio] Initialized"),!0}catch(e){return console.error("[MinimalistAudio] Init failed:",e),!1}}createPinkNoise(e){const t=this.audioContext.sampleRate*e,n=this.audioContext.createBuffer(1,t,this.audioContext.sampleRate),o=n.getChannelData(0);let u=0,p=0,s=0,i=0,r=0,a=0,c=0;for(let l=0;l<t;l++){const m=Math.random()*2-1;u=.99886*u+m*.0555179,p=.99332*p+m*.0750759,s=.969*s+m*.153852,i=.8665*i+m*.3104856,r=.55*r+m*.5329522,a=-.7616*a-m*.016898;const d=u+p+s+i+r+a+c+m*.5362;o[l]=d*.11,c=m*.115926}return n}createSoftBitCrusher(e=10){const n=this.audioContext.createScriptProcessor(256,1,1),o=Math.pow(1/2,e);let u=0,p=0;return n.onaudioprocess=s=>{const i=s.inputBuffer.getChannelData(0),r=s.outputBuffer.getChannelData(0);for(let a=0;a<256;a++)u+=.9,u>=1&&(u-=1,p=o*Math.floor(i[a]/o+.5)),r[a]=p},n}playSandShift(){const e=this.audioContext,t=e.currentTime,n=.2,o=e.createOscillator();o.type="square",o.frequency.setValueAtTime(150,t),o.frequency.exponentialRampToValueAtTime(100,t+n);const u=this.createPinkNoise(n),p=e.createBufferSource();p.buffer=u;const s=e.createBiquadFilter();s.type="bandpass",s.frequency.value=800,s.Q.value=.5;const i=e.createBiquadFilter();i.type="lowpass",i.frequency.value=1500;const r=this.createSoftBitCrusher(8),a=e.createGain();a.gain.value=.12;const c=e.createGain();c.gain.value=.08;const l=e.createGain();l.gain.setValueAtTime(0,t),l.gain.linearRampToValueAtTime(.2,t+.02),l.gain.linearRampToValueAtTime(.15,t+.1),l.gain.exponentialRampToValueAtTime(.001,t+n),o.connect(a),p.connect(c),a.connect(s),c.connect(s),s.connect(i),i.connect(r),r.connect(l),l.connect(e.destination),o.start(t),p.start(t),o.stop(t+n),p.stop(t+n)}playSandCrystal(){const e=this.audioContext,t=e.currentTime,n=.18,o=e.createOscillator();o.type="triangle",o.frequency.value=400;const u=e.createOscillator();u.type="sine",u.frequency.value=400*3.5;const p=e.createGain();p.gain.value=200,u.connect(p),p.connect(o.frequency);const s=e.createOscillator();s.type="square",s.frequency.value=200;const i=e.createGain();i.gain.value=.04;const r=e.createDelay(.01);r.delayTime.value=.003;const a=e.createGain();a.gain.value=.2;const c=this.createSoftBitCrusher(9),l=e.createGain();l.gain.setValueAtTime(0,t),l.gain.linearRampToValueAtTime(.25,t+.008),l.gain.exponentialRampToValueAtTime(.001,t+n),o.connect(r),s.connect(i),i.connect(r),r.connect(a),a.connect(r),r.connect(c),c.connect(l),l.connect(e.destination),o.start(t),u.start(t),s.start(t),o.stop(t+n),u.stop(t+n),s.stop(t+n)}playSandWhisper(){const e=this.audioContext,t=e.currentTime,n=.22,o=e.sampleRate*n,u=e.createBuffer(1,o,e.sampleRate),p=u.getChannelData(0);for(let d=0;d<o;d++)p[d]=(Math.random()*2-1)*.4;const s=e.createBufferSource();s.buffer=u;const i=e.createOscillator();i.type="square",i.frequency.value=250;const r=e.createGain();r.gain.value=.02;const a=e.createBiquadFilter();a.type="bandpass",a.frequency.setValueAtTime(1500,t),a.frequency.exponentialRampToValueAtTime(3e3,t+n),a.Q.value=.3;const c=e.createBiquadFilter();c.type="lowpass",c.frequency.value=2e3;const l=this.createSoftBitCrusher(10),m=e.createGain();m.gain.setValueAtTime(0,t),m.gain.linearRampToValueAtTime(.15,t+.05),m.gain.linearRampToValueAtTime(.12,t+.15),m.gain.exponentialRampToValueAtTime(.001,t+n),s.connect(a),i.connect(r),r.connect(a),a.connect(c),c.connect(l),l.connect(m),m.connect(e.destination),s.start(t),i.start(t),s.stop(t+n),i.stop(t+n)}playSandTrickle(){const e=this.audioContext,t=e.currentTime,n=.22,o=12,u=.03;for(let l=0;l<o;l++){const m=t+l*.015+Math.random()*.005,d=e.sampleRate*u,T=e.createBuffer(1,d,e.sampleRate),f=T.getChannelData(0);for(let v=0;v<d;v++){const b=Math.sin(v/d*Math.PI);f[v]=(Math.random()*2-1)*b*.3}const h=e.createBufferSource();h.buffer=T;const g=e.createBiquadFilter();g.type="bandpass",g.frequency.value=2e3+Math.random()*3e3,g.Q.value=.5+Math.random()*.5;const y=e.createGain(),A=.15*Math.pow(.85,l);y.gain.setValueAtTime(A,m),y.gain.exponentialRampToValueAtTime(.001,m+u),h.connect(g),g.connect(y),y.connect(e.destination),h.start(m),h.stop(m+u)}const p=this.createPinkNoise(n),s=e.createBufferSource();s.buffer=p;const i=e.createBiquadFilter();i.type="highpass",i.frequency.value=4e3,i.Q.value=.7;const r=e.createOscillator();r.frequency.value=7;const a=e.createGain();a.gain.value=.05;const c=e.createGain();c.gain.setValueAtTime(0,t),c.gain.linearRampToValueAtTime(.08,t+.02),c.gain.linearRampToValueAtTime(.06,t+.15),c.gain.exponentialRampToValueAtTime(.001,t+n),r.connect(a),a.connect(c.gain),s.connect(i),i.connect(c),c.connect(e.destination),s.start(t),r.start(t),s.stop(t+n),r.stop(t+n)}playSandMagic(){const e=this.audioContext,t=e.currentTime,n=.25,o=e.createOscillator();o.type="triangle",o.frequency.setValueAtTime(600,t),o.frequency.exponentialRampToValueAtTime(1800,t+.2);const u=e.createOscillator();u.type="sine",u.frequency.value=250;const p=e.createGain();p.gain.setValueAtTime(500,t),p.gain.exponentialRampToValueAtTime(100,t+.2),u.connect(p),p.connect(o.frequency);const s=this.createPinkNoise(n),i=e.createBufferSource();i.buffer=s;const r=e.createGain();r.gain.value=.08;const a=e.createBiquadFilter();a.type="bandpass",a.frequency.setValueAtTime(800,t),a.frequency.exponentialRampToValueAtTime(2e3,t+.2),a.Q.value=3;const c=this.createSoftBitCrusher(9),l=e.createGain();l.gain.setValueAtTime(0,t),l.gain.linearRampToValueAtTime(.35,t+.01),l.gain.exponentialRampToValueAtTime(.001,t+n),o.connect(a),i.connect(r),r.connect(a),a.connect(c),c.connect(l),l.connect(e.destination),o.start(t),u.start(t),i.start(t),o.stop(t+n),u.stop(t+n),i.stop(t+n)}playAbsorbedImpact(){const e=this.audioContext,t=e.currentTime,n=.4,o=e.sampleRate*.008,u=e.createBuffer(1,o,e.sampleRate),p=u.getChannelData(0);for(let h=0;h<o;h++)p[h]=(Math.random()*2-1)*Math.exp(-h/(o*.2))*.7;const s=e.createBufferSource();s.buffer=u;const i=e.createBiquadFilter();i.type="lowpass",i.frequency.value=1e3;const r=e.createOscillator(),a=e.createOscillator();r.type="sine",a.type="triangle";const c=180+Math.random()*80;r.frequency.value=c,a.frequency.value=c*.5;const l=e.createGain(),m=e.createGain();l.gain.setValueAtTime(0,t),l.gain.linearRampToValueAtTime(.3*this.globalVolume,t+.02),l.gain.exponentialRampToValueAtTime(.001,t+n),m.gain.setValueAtTime(0,t),m.gain.linearRampToValueAtTime(.15*this.globalVolume,t+.03),m.gain.exponentialRampToValueAtTime(.001,t+n);const d=e.createDelay(.02);d.delayTime.value=.012;const T=e.createGain();T.gain.value=.4;const f=e.createGain();f.gain.value=.4*this.globalVolume,s.connect(i),i.connect(f),r.connect(l),a.connect(m),l.connect(d),m.connect(d),d.connect(T),T.connect(d),d.connect(f),f.connect(e.destination),s.start(t),r.start(t),a.start(t),s.stop(t+.008),r.stop(t+n),a.stop(t+n)}playPaperWave(){const e=this.audioContext,t=e.currentTime,n=.4,o=e.createOscillator(),u=e.createOscillator();o.type="triangle",u.type="sine",o.frequency.setValueAtTime(320,t),o.frequency.exponentialRampToValueAtTime(160,t+n),u.frequency.setValueAtTime(325,t),u.frequency.exponentialRampToValueAtTime(155,t+n);const p=e.createOscillator();p.frequency.value=12;const s=e.createGain();s.gain.value=.3,p.connect(s);const i=e.createStereoPanner();i.pan.setValueAtTime(-.7,t),i.pan.linearRampToValueAtTime(.7,t+n);const r=e.createOscillator();r.type="square",r.frequency.value=80;const a=e.createGain();a.gain.value=.03;const c=e.createGain();c.gain.setValueAtTime(0,t),c.gain.linearRampToValueAtTime(.25,t+.1),c.gain.linearRampToValueAtTime(.2,t+.25),c.gain.exponentialRampToValueAtTime(.001,t+n),s.connect(c.gain),o.connect(c),u.connect(c),r.connect(a),a.connect(c),c.connect(i),i.connect(e.destination),o.start(t),u.start(t),p.start(t),r.start(t),o.stop(t+n),u.stop(t+n),p.stop(t+n),r.stop(t+n)}playInkSaturation(){const e=this.audioContext,t=e.currentTime,n=.4,o=120,u=[1,2,3,4,5,6],p=e.createGain(),s=this.createSoftBitCrusher(10);u.forEach((c,l)=>{const m=e.createOscillator(),d=e.createGain();m.type=l%2===0?"sawtooth":"square",m.frequency.value=o*c;const T=l*.05,f=.3/c;d.gain.setValueAtTime(0,t+T),d.gain.linearRampToValueAtTime(f,t+T+.08),d.gain.linearRampToValueAtTime(f*.8,t+.3),d.gain.exponentialRampToValueAtTime(.001,t+n),m.connect(d),d.connect(p),m.start(t),m.stop(t+n)});const i=e.createBiquadFilter();i.type="lowpass",i.frequency.setValueAtTime(200,t),i.frequency.exponentialRampToValueAtTime(800,t+n),i.Q.setValueAtTime(.5,t),i.Q.linearRampToValueAtTime(3,t+n);const r=e.createWaveShaper(),a=new Float32Array(256);for(let c=0;c<256;c++){const l=c/128-1;a[c]=Math.tanh(l*1.5)}r.curve=a,p.gain.value=.35,p.connect(s),s.connect(r),r.connect(i),i.connect(e.destination)}playSurfaceEcho(){const e=this.audioContext,t=e.currentTime,n=.4,o=e.sampleRate*.15,u=e.createBuffer(1,o,e.sampleRate),p=u.getChannelData(0);for(let h=0;h<o;h++)p[h]=(Math.random()*2-1)*Math.exp(-h/(o*.6))*.6;const s=e.createBufferSource();s.buffer=u;const i=e.createOscillator();i.type="square",i.frequency.value=200;const r=e.createGain();r.gain.value=.05;const a=e.createBiquadFilter();a.type="bandpass",a.frequency.value=800,a.Q.value=1.2;const c=e.createDelay(.02);c.delayTime.value=.01+Math.random()*.005;const l=e.createGain();l.gain.value=.45;const m=e.createBiquadFilter();m.type="lowpass",m.frequency.value=2500;const d=e.createGain(),T=e.createGain(),f=e.createGain();d.gain.value=.6,T.gain.value=.4,f.gain.setValueAtTime(0,t),f.gain.linearRampToValueAtTime(.3,t+.05),f.gain.exponentialRampToValueAtTime(.001,t+n),s.connect(a),i.connect(r),r.connect(a),a.connect(d),a.connect(c),c.connect(T),c.connect(l),l.connect(m),m.connect(c),d.connect(f),T.connect(f),f.connect(e.destination),s.start(t),i.start(t),s.stop(t+.15),i.stop(t+n)}playReveal(){this.playAbsorbedImpact(),this.hapticsEnabled&&(this.haptics.reveal(),console.log("[MinimalistAudio] Triggered reveal haptic (100ms)"))}scheduleRevealAt(e){if(!this.audioContext){console.warn("[MinimalistAudio] Cannot schedule - no audio context");return}const t=Math.max(0,e-this.audioContext.currentTime);setTimeout(()=>{this.playAbsorbedImpact()},t*1e3),console.log("[MinimalistAudio] Scheduled reveal at:",e,"delay:",t*1e3,"ms")}playActivate(){switch(this.currentActivate){case"absorbedImpact":this.playAbsorbedImpact();break;case"paperWave":this.playPaperWave();break;case"inkSaturation":this.playInkSaturation();break;case"surfaceEcho":this.playSurfaceEcho();break}this.hapticsEnabled&&(this.haptics.activate(),console.log("[MinimalistAudio] Triggered activate haptic (200ms)"))}scheduleActivateAt(e){if(!this.audioContext){console.warn("[MinimalistAudio] Cannot schedule - no audio context");return}const t=Math.max(0,e-this.audioContext.currentTime);setTimeout(()=>{this.playActivate()},t*1e3),console.log("[MinimalistAudio] Scheduled activate at:",e,"delay:",t*1e3,"ms")}setRevealSound(e){this.currentReveal=e}setActivateSound(e){this.currentActivate=e}setGlobalVolume(e){this.globalVolume=Math.max(.1,Math.min(5,e)),console.log(`[MinimalistAudio] Global volume set to ${this.globalVolume}`)}setHapticsEnabled(e){this.hapticsEnabled=e,this.haptics.setEnabled(e),console.log(`[MinimalistAudio] Haptics ${e?"enabled":"disabled"}`)}getHapticCapabilities(){return this.haptics.getCapabilities()}testHaptics(e="reveal"){e==="reveal"?this.haptics.reveal():e==="activate"&&this.haptics.activate()}}export{G as default};
